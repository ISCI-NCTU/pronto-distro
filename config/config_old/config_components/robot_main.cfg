coordinate_frames {
  root_frame = "local";

  
  
  # this is the pelvis link, its a legacy that its referred to as body
  body {
    relative_to = "local";
    history = 5000;
    max_frequency = 1000;
    pose_update_channel = "POSE_BODY";
    #update_channel = "HEAD_TO_BODY";  
    initial_transform{
      translation = [ 0, 0, 0 ];
      rpy = [0, 0, 0];
    }
  }


  head {
    relative_to = "body";
    history = 5000;
    max_frequency = 100;
    #pose_update_channel= "POSE_HEAD";
    update_channel = "BODY_TO_HEAD";  
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }  


  # this is a floating body frame disconnected from the rest of the tree
  # [[[[[[ it only exists as a convenience ]]]]
  # it also not directly connected to "bdi". modulo update rates:
  # POSE_BDI =    POSE_BODY * BODY_TO_BDI
  body_bdi {
    relative_to = "local";
    history = 5000;
    max_frequency = 100;
    pose_update_channel= "POSE_BDI";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }

  # this is the transform between BDI coordinate system and MIT's frame
  # frame_in_bdi_system = bdi * frame_in_mit_system
  local_bdi {
    relative_to = "local";
    history = 5000;
    max_frequency = 100;
    update_channel= "LOCAL_TO_LOCAL_BDI";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }
    
  
  # An alternative body frame, for comparison with POSE_BODY
  # when developing state estimation
  body_alt {
    # this cannot change - its rigid
    relative_to = "local";
    history = 5000;
    max_frequency = 100;
    pose_update_channel= "POSE_BODY_ALT";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }   

  # An alternative body frame, for comparison with CAMERA_LEFT
  # when developing state estimation
  CAMERA_LEFT_ALT {
    # this cannot change - its rigid
    relative_to = "local";
    history = 5000;
    max_frequency = 100;
    pose_update_channel= "POSE_CAMERA_LEFT_ALT";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }   
  
  # Pose as published by Vicon
  # for a short time was VICON_BODY
  frontplate_vicon {
    relative_to = "local";
    history = 5000;
    update_channel= "VICON_FRONTPLATE";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  } 
  
  # Transform between marker frame and body
  # (eventually) known fixed transform
  body_vicon {
    relative_to = "frontplate_vicon";
    history = 5000;
    update_channel= "BODY_TO_FRONTPLATE_VICON";
    initial_transform{
      # Original Guessimates by mfallon
      #translation=[  0.0 , -0.2 , 0.0 ];
      #rpy = [4.0 , 10.0 , 110.0 ];
      
      # original tf from Matt - actually FRONTPLATE_VICON to BODY
      #trans = [0.167358196826787, 0.00311776304136496, 0.0585324012135696];
      #quat = [0.606055004820709, 0.0496525684836397, -0.0756283947073843, -0.790260905960008];
      
      # optimized by Matt Antone 25 Jan 2014
      #translation= [0.0458, -0.1688, -0.0293];
      #quat= [0.606055, -0.0496526, 0.0756284, 0.7902609] ;

      # optimized for new vsk files by A. Valenzuela 21 Mar 2014
      translation = [-0.145443, -0.115932, -0.055009];
      quat = [0.941832, 0.025487, 0.022232, 0.334378];
    }
  } 
  
  
  # pose used by state estimation metrics
  pose_vicon {
    relative_to = "local";
    history = 5000;
    max_frequency = 5;
    pose_update_channel= "POSE_VICON";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }

  # this is the body to imu transform - as provided by BDI in 
  # supplementary information in Sept 2013.
  # correct Jan 2013. didn't match signals previously
  imu {
    relative_to = "body";
    history = 5000;
    #update_channel = "BODY_TO_IMU";  
    initial_transform{
      translation = [ -0.0905, -0.000004, -0.012 ];
      rpy = [0,180,-45];
    }
  }  

  utorso {
    relative_to = "body";
    history = 5000;
    max_frequency = 5;    
    update_channel = "BODY_TO_UTORSO";  
    initial_transform{
      translation = [ 0, 0, 0 ];
      quat = [ 1, 0, 0, 0 ];
    }
  }


  # Show what the ground height infered from the feet height is
  # Depreciated but still used as of Sept 2014
  ground {
    relative_to = "local";
    history = 5000;
    max_frequency = 5;
    pose_update_channel= "POSE_GROUND";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }

  CAMERACHEST_LEFT {
    # position estimated by eye, not accurate
    relative_to = "utorso";
    history = 1000;
    update_channel = "UTORSO_TO_CAMERACHEST_LEFT_OPTICAL_FRAME";  
    initial_transform{
      # calibrated to head camera by Matt A. 2013-12-03, no translation
      #translation = [0.216409, -0.121799, 0.406759];
      #rpy = [-85.465012, 0.840432, -13.015107];

      # calibrated to head camera by Matt A. 2013-12-03, full
      translation = [0.207504, 0.096850, 0.423304];
      rpy = [-90.013100, -0.465664, -16.477903];

      # mapped over from the URDF (oct 2013)
      translation = [ 0.216409, 0.121799, 0.406759 ];
      rpy = [ -90.0, 0.0, -15.0];
      # Original Manually done:
      #translation = [ 0.175, 0.09, 0.4 ];
      #rpy = [ -90.0, 0.0, -15.0];      
    }
  }

  CAMERACHEST_RIGHT {
    # position estimated by eye, not accurate
    relative_to = "utorso";
    history = 1000;
    update_channel = "UTORSO_TO_CAMERACHEST_RIGHT_OPTICAL_FRAME";  
    initial_transform{
      # calibrated to head camera by Matt A. 2013-12-03, no translation
      #translation = [0.216409, 0.121799, 0.406759];
      #rpy = [-88.084805, 0.425035, -164.778553];

      # calibrated to head camera by Matt A. 2013-12-03, full
      #translation = [0.230946, -0.007802, 0.473559];
      #rpy = [-90.535614, -0.310465, -162.756085];

      # mapped over from the URDF (oct 2013)
      translation = [ 0.216409, -0.121799, 0.406759 ];
      rpy = [ -90.0, 0.0, -165.0];
      # Original Manually done:    
      #translation = [ 0.175, -0.09, 0.4 ];
      #rpy = [ -90.0, 0.0, -165.0];
    }
  }

  CAMERAREAR {
    # position estimated by eye, not accurate
    relative_to = "utorso";
    history = 1000;
    update_channel = "UTORSO_TO_CAMERAREAR_RIGHT_OPTICAL_FRAME";  
    initial_transform{
      translation = [ -0.05, -0.0, 0.6 ];
      rpy = [ -90.0, 0.0, 90.0];      
    }
  }

}




cameras {
  WEBCAM {
    # Logtech webcam, coord_frame chosen for convenience
    lcm_channel = "WEBCAM";
    coord_frame = "CAMERA_LEFT";
    intrinsic_cal{
      width = 640;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [ 0,0];
      pinhole = [  257.5196,   257.5196, 0, 320.5, 240.5];
    }      
  }

  CAMERACHEST_LEFT {
    # SA Camera, fish eye calibrated by Matt A. on 2013-08-22
    lcm_channel = "CAMERACHEST_LEFT";
    coord_frame = "CAMERACHEST_LEFT";
    intrinsic_cal{
      width = 1024;
      height= 1280;
      distortion_model = "angular-poly";
      distortion_coeffs = [ 0.421109280490297, -0.0882674344589703, 0.286049760181108 ];
      pinhole = [ 299.011497312, 299.011497312, 0, 512.28080444, 653.237957407 ];
    }      
  }

  # sample "virtual" image that can be created using drc-image-warp
  CAMERACHEST_LEFT_WARP {
    lcm_channel = "CAMERACHEST_LEFT_WARP";
    coord_frame = "CAMERACHEST_LEFT_WARP";
    intrinsic_cal {
      width = 640;
      height= 480;
      distortion_model = "null";
      pinhole = [ 200, 200, 0, 320, 240 ];
    }      
  }

  CAMERACHEST_RIGHT {
    # SA Camera, fish eye calibrated by Matt A. on 2013-08-22
    lcm_channel = "CAMERACHEST_RIGHT";
    coord_frame = "CAMERACHEST_RIGHT";
    intrinsic_cal{
      width = 1024;
      height= 1280;
      distortion_model = "angular-poly";
      distortion_coeffs = [ 0.388557885592878, -0.0264407879209483, 0.251453140803951];
      pinhole = [ 295.90626545, 295.90626545, 0, 485.159101445, 641.05982734344];
    }      
  }

  # sample "virtual" image that can be created using drc-image-warp
  CAMERACHEST_RIGHT_WARP {
    lcm_channel = "CAMERACHEST_RIGHT_WARP";
    coord_frame = "CAMERACHEST_RIGHT_WARP";
    intrinsic_cal {
      width = 640;
      height= 480;
      distortion_model = "null";
      pinhole = [ 200, 200, 0, 320, 240 ];
    }      
  }

  CAMERAREAR {
    # Rear facing DLink Webcam, not calibrated
    lcm_channel = "CAMERAREAR";
    coord_frame = "CAMERAREAR";
    intrinsic_cal{
      width = 640;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [ 0,0];
      pinhole = [  257.5196,   257.5196, 0, 320.5, 240.5];
    }      
  } 
   
  CAMERALHAND {
    lcm_channel = "CAMERALHAND";
    coord_frame = "CAMERALHAND";
    intrinsic_cal{
      width = 1280;
      height= 1024;
      
      # calibration recovered by m antone for ptgrey 13250065 
      # and 2.8mm tamron lense on 24 feb 2014
      distortion_model = "angular-poly";
      distortion_coeffs = [ 0.310196792373582, 0.0864679326245578 ];
      pinhole = [  546.479165547316, 546.479165547316, 0, 647.510583175409, 526.704741246769];      
      # was       pinhole = [  517.5196,   517.5196, 0, 640.5, 512.5];


    }
  }
    
  CAMERARHAND {
    lcm_channel = "CAMERARHAND";
    coord_frame = "CAMERARHAND";
    intrinsic_cal{
      width = 1280;
      height= 1024;
      
      # calibration recovered by m antone for ptgrey 13250065 
      # and 2.8mm tamron lense on 24 feb 2014
      distortion_model = "angular-poly";
      distortion_coeffs = [ 0.310196792373582, 0.0864679326245578 ];
      pinhole = [  546.479165547316, 546.479165547316, 0, 647.510583175409, 526.704741246769];      
      # was       pinhole = [  517.5196,   517.5196, 0, 640.5, 512.5];
    }
  }

  # "virtual" image of CAMERARHAND using drc-image-warp
  CAMERARHAND_WARP {
    lcm_channel = "CAMERARHAND_WARP";
    coord_frame = "CAMERARHAND_WARP";
    intrinsic_cal {
      width = 1280;
      height= 1024;
      distortion_model = "null";
      #pinhole = [ 200, 200, 0, 320, 240 ];
      pinhole = [  546.479165547316, 546.479165547316, 0, 647.510583175409, 526.704741246769];   
    }      
  }

  # "virtual" image of CAMERARHAND using drc-image-warp
  CAMERALHAND_WARP {
    lcm_channel = "CAMERALHAND_WARP";
    coord_frame = "CAMERALHAND_WARP";
    intrinsic_cal {
      width = 1280;
      height= 1024;
      distortion_model = "null";
      #pinhole = [ 200, 200, 0, 320, 240 ];
      pinhole = [  546.479165547316, 546.479165547316, 0, 647.510583175409, 526.704741246769];   

    }         
  }
}
